/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface InfraDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isMember"
      | "join"
      | "members"
      | "setProjectVoteContract"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewMember" | "VoteSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectVoteContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectVoteContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace NewMemberEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteSubmittedEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InfraDAO extends BaseContract {
  connect(runner?: ContractRunner | null): InfraDAO;
  waitForDeployment(): Promise<this>;

  interface: InfraDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isMember: TypedContractMethod<[_member: AddressLike], [boolean], "view">;

  join: TypedContractMethod<[], [void], "payable">;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isMember: boolean; votesRemaining: bigint }],
    "view"
  >;

  setProjectVoteContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_index: BigNumberish, _votes: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[_member: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isMember: boolean; votesRemaining: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProjectVoteContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_index: BigNumberish, _votes: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewMember"
  ): TypedContractEvent<
    NewMemberEvent.InputTuple,
    NewMemberEvent.OutputTuple,
    NewMemberEvent.OutputObject
  >;
  getEvent(
    key: "VoteSubmitted"
  ): TypedContractEvent<
    VoteSubmittedEvent.InputTuple,
    VoteSubmittedEvent.OutputTuple,
    VoteSubmittedEvent.OutputObject
  >;

  filters: {
    "NewMember(address)": TypedContractEvent<
      NewMemberEvent.InputTuple,
      NewMemberEvent.OutputTuple,
      NewMemberEvent.OutputObject
    >;
    NewMember: TypedContractEvent<
      NewMemberEvent.InputTuple,
      NewMemberEvent.OutputTuple,
      NewMemberEvent.OutputObject
    >;

    "VoteSubmitted(address)": TypedContractEvent<
      VoteSubmittedEvent.InputTuple,
      VoteSubmittedEvent.OutputTuple,
      VoteSubmittedEvent.OutputObject
    >;
    VoteSubmitted: TypedContractEvent<
      VoteSubmittedEvent.InputTuple,
      VoteSubmittedEvent.OutputTuple,
      VoteSubmittedEvent.OutputObject
    >;
  };
}
